group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay))
a
?arrange
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
arrange(asc(avg_arr_delay))
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay))
a
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
filter(avg_arr_delay =- max(avg_arr_delay))
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
filter(avg_arr_delay == max(avg_arr_delay))
a
?filter
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay))
filter(a, avg_arr_delay == max(avg_arr_delay))
max(a$avg_arr_delay)
max(a$avg_arr_delay, na.rm = T)
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
filter(avg_arr_delay == max(avg_arr_delay))
a
a <- nycflights13::flights %>%
select(arr_delay, dest) %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = T))
a
a <- c(1,2,5,6)
a[3]
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_earned <- c(1,2,3,4)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_lost <- c(5,6,7,8)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_earned, points_lost)
games
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
View(games)
?mutate
games <- mutate(games, diff = points_earned - points_lost)
# Exercise 1: creating data frames
library(dplyr)
games <- mutate(games, diff = points_earned - points_lost)
games
games$diff_2 <- points_earned-points_lost
games
games$won <- points_earned > points_lost
games
rownames <- c(opponent_names)
opponent_names <- c("a", "b","c","d")
rownames <- c(opponent_names)
# Assign your dataframe rownames of their opponents
rownames(games) <- c(opponent_names)
# View your data frame to see how it has changed!
View(games)
# How many *unique* locations are in the dataset? `num_locations`
num_locations <- length(unique(locations))
################ Overview ###############
# Assignment 1: Analysis of the protest data from Crowd Love
# For each question/prompt, write the necessary code to calculate the answer.
# For grading, it's important that you store your answers in the variable names
# listed with each question in `backtics`.
# For each prompt marked `Reflection`, please write a response
# in your `README.md` file.
############### Part 1:Set up ##############
# In this section, you're loading the data and necessary packages.
# Load the `stringr` package, which you'll use later.
library(stringr)
# Load the data from https://countlove.org/data/data.csv
# into a variable called `protests`
protests <- read.csv("https://countlove.org/data/data.csv")
# How many protests are in the dataset? `num_protests`
num_protests <- nrow(protests)
# How much information is available about each protest? `num_features`
num_features <- ncol(protests)
############### Part 2: Attendees ###############
# In this section, you're exploring the number of attendees.
# Extract the `Attendees` column into a variable called `num_attendees`
num_attendees <- protests$Attendees
# What is the lowest number of attendees? `min_attendees`
# (hint for this and other calculations: you'll need to consider missing values)
min_attendees <- min(num_attendees, na.rm = T)
# What is the highest number of attendees? `max_attendees`
max_attendees <- max(num_attendees, na.rm = T)
a <- num_attendees[num_attendees == 7250000 & !is.na(num_attendees)]
protests$Locations[num_attendees == 7250000 & !is.na(num_attendees)]
protests[num_attendees == 725000]
locations[num_attendees == max_attendees]
num_attendees
colnames(protests)
# What is the mean number of attendees? `mean_attendees`
mean_attendees <- mean(num_attendees, na.rm = T)
# What is the median number of attendees? `median_attendees`
median_attendees <- median(num_attendees, na.rm = T)
# What is the difference between the mean and median number of attendees?
# `mean_median_diff`
mean_median_diff <- mean_attendees - median_attendees
# Reflection: What does the difference between the mean and the median
# tell you about the *distribution* of the data? (if you're unfamiliar with
# working with distibutions, feel free to ask your TA for clarification)
# To further assess the distribution of values, create a boxplot of the number
# of attendees using the `boxplot()` function.
# Store the plot in a variable called `attendess_distribution`
# (Note, we'll use much more refined plotting methods, and pay far
# more attention to detail later in the course)
attendees_distribution <- boxplot(num_attendees)
# Create another boxplot of the *log* of the number of attendees.
# Store the plot in a variable `log_attendees_distribution`.
# (note, you will see a warning in the console, which is expected)
log_attendees_distribution <- boxplot(log(num_attendees))
############### Part 3: Locations ###############
# In this section, you're exploring where protests happened.
# Extract the `Location` column into a variable called `locations`
locations <- protests$Location
# How many *unique* locations are in the dataset? `num_locations`
num_locations <- length(unique(locations))
# Extract the `Location` column into a variable called `locations`
locations <- protests$Location
# How many *unique* locations are in the dataset? `num_locations`
num_locations <- length(unique(locations))
# How many protests occured in Washington? `num_in_wa`
# (hint: use a function from the stringr package to detect the letters "WA")
num_in_wa <- sum(str_detect(locations, "WA"))
num_in_wa
num_locations
library(stringr)
# Load the data from https://countlove.org/data/data.csv
# into a variable called `protests`
protests <- read.csv("https://countlove.org/data/data.csv")
# How many protests are in the dataset? `num_protests`
num_protests <- nrow(protests)
# How much information is available about each protest? `num_features`
num_features <- ncol(protests)
############### Part 2: Attendees ###############
# In this section, you're exploring the number of attendees.
# Extract the `Attendees` column into a variable called `num_attendees`
num_attendees <- protests$Attendees
# Extract the `Attendees` column into a variable called `num_attendees`
num_attendees <- protests$Attendees
num_attendees
num_att <- protest["Attendees"]
num_att <- protests["Attendees"]
num_att
# What is the mean number of attendees? `mean_attendees`
mean_attendees <- mean(num_attendees, na.rm = T)
# What is the median number of attendees? `median_attendees`
median_attendees <- median(num_attendees, na.rm = T)
# What is the difference between the mean and median number of attendees?
# `mean_median_diff`
mean_median_diff <- mean_attendees - median_attendees
attendees_distribution <- boxplot(num_attendees)
# Create another boxplot of the *log* of the number of attendees.
# Store the plot in a variable `log_attendees_distribution`.
# (note, you will see a warning in the console, which is expected)
log_attendees_distribution <- boxplot(log(num_attendees))
# To further assess the distribution of values, create a boxplot of the number
# of attendees using the `boxplot()` function.
# Store the plot in a variable called `attendess_distribution`
# (Note, we'll use much more refined plotting methods, and pay far
# more attention to detail later in the course)
attendees_distribution <- boxplot(num_attendees)
?str_detect
"2020-05-05" > "2020-01-01"
test <- c(1,2,3,4)
test
length(test)
library(dplyr)
?read
?read.xslx
setwd("D:/ubunwork/NextstrainProjects/covid_consensus_seqs/scripts")
getwd()
read.table("../data/All_conseqs_2020-10-10_metadata.xslx")
setwd("D:/ubunwork/NextstrainProjects/covid_consensus_seqs/scripts")
read.table("../data/All_conseqs_2020-10-10_metadata.xslx")
read.table(../data/All_conseqs_2020-10-10_metadata.xslx)
install.packages("readxl")
library(readxl)
?read_xlsx
read_xlsx("../data/All_conseqs_2020-10-10_metadata.xslx")
read_xlsx("/../data/All_conseqs_2020-10-10_metadata.xslx")
setwd("D:/ubunwork/NextstrainProjects/covid_consensus_seqs/scripts")
..
cd ..
read_xlsx("../data/All_conseqs_2020-10-10_metadata.xslx")
read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
colnames(md_raw)
?rename
md_renamed <- rename(md_raw, collection_date = date, gisaid_full_name = strain)
md_renamed <- rename(md_raw, date = collection_date, strain = gisaid_full_name)
md_renamed
?write.csv
write.csv(md_renamed, file = "mod_conseqs_2020-10-10_metadata.csv", row.names = F)
write.csv(md_renamed, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
md_renamed$strain
library(stringr)
?substr
md_renamed <- rename(md_raw, date = collection_date, strain = gisaid_full_name)
md_renamed
md_filtered <- select(strain) %>%
filter(substr(strain, 1, 7) == "hCov-19")
md_filtered <- md_renamed %>%
select(strain) %>%
filter(substr(strain, 1, 7) == "hCov-19")
md_filtered
?filter
md_filtered <- md_renamed %>%
select(strain) %>%
filter(strain != "Not Submitted")
md_filtered
nrow(md_renamed)
nrow(md_filtered)
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
md_renamed <- rename(md_raw, date = collection_date, strain = gisaid_full_name)
md_filtered <- md_renamed %>%
select(strain) %>%
filter(strain != "Not Submitted")
nrow(md_renamed)
nrow(md_filtered)
substr("happy", 1,2)
"happy" == "happy"
substr("happy", 1,2) == "ha"
md_filtered <- md_renamed %>%
select(strain) %>%
filter(substr(strain,1,6) == "hCov-19")
nrow(md_filtered)
md_filtered <- md_renamed %>%
select(strain) %>%
filter(substr(strain, 1, 2) == "hC")
md_filtered
md_filtered <- md_renamed %>%
select(strain) %>%
filter(substr(strain, 1, 7) == "hCoV-19")
nrow(md_filtered)
nrow(md_renamed)
?infexOf
?indexOf
?charAt
md_filtered
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19")
md_filtered
nrow(md_filtered)
md_filtered
View(md_filtered)
?mutate
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 8, 10))
md_filtered
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11))
md_filtered
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2")
md_filtered
colnames(md_filtered)
md_filered$virus
md_filtered$virus
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
?drop
?remove
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
remove(samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
drop(samplabel)
?delete
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
select(-samplabel)
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
colnames(md_filtered)
md_test <- mdfiltered %>%
select(date, country, state, county, gisaid_short_name, strain, gisaid_accession, virus)
# testing
md_test <- md_filtered %>%
select(date, country, state, county, gisaid_short_name, strain, gisaid_accession, virus)
md_test
write.csv(md_test, file = "../data/test_conseqs_metadata.csv", row.names = F)
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
select(-samplabel)
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
md_renamed
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(strain, 1, 7) == "hCoV-19") %>%
mutate(country = substr(strain, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
md_filtered
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
md_renamed
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
colnames(md_renamed)
md_renamed$gisaid_full_name[1]
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel, full_name = gisaid_full_name)
md_renamed
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
md_renamed
# read in raw metadata
md_raw <- read_xlsx("../data/All_conseqs_2020-10-10_metadata.xlsx")
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# changed to CSV file
write.csv(md_renamed, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# changed to CSV file
write.csv(md_renamed, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# rename columns to suit augur commands for phylogenetic tree creation
md_renamed <- rename(md_raw, date = collection_date, strain = samplabel)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
#filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
#mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
#mutate(country = substr(gisaid_full_name, 9, 11)) %>%
#mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
#filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
#mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
#filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
#mutate(country = substr(gisaid_full_name, 9, 11)) %>%
#mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
md_filtered <- md_renamed
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2") %>%
x <- 1
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2")
md_filtered
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2")
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
# Further processing and creation of data columns to suit augur commands
md_filtered <- md_renamed %>%
filter(substr(gisaid_full_name, 1, 7) == "hCoV-19") %>%
mutate(country = substr(gisaid_full_name, 9, 11)) %>%
mutate(virus = "Severe acute respiratory syndrome coronavirus 2")
# changed to CSV file
write.csv(md_filtered, file = "../data/mod_conseqs_2020-10-10_metadata.csv", row.names = F)
